package com.dp;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import com.dp.math.PrimeNumbers;
import com.sun.tools.javac.util.Pair;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class P12HighlyDivisibleTriangularNumber {
	public static void main(String[] args) {
		P12HighlyDivisibleTriangularNumber triangularNumber = new P12HighlyDivisibleTriangularNumber();
		triangularNumber.process(500);
	}


	private Pair<Integer, List<Integer>> process(int number) {
		long start = System.currentTimeMillis(); // start the stopwatch

		int triangle = 0; // triangle represents the triangle number corresponding to j
		int numberOfDivisors = 0; // number of divisors for triangle number triangle

		List<Integer> result = new ArrayList<>();
		for ( int j =0; numberOfDivisors <= number; j++) {

			result = new ArrayList<>();
			// resets numberOfDivisors because it's now checking a new triangle number
			// and also sets triangle to be the next triangle number
			numberOfDivisors = 0;
			triangle = triangleNumber(j);

			// for every number from 1 to the square root of this triangle number,
			// count the number of divisors
			for (int i = 1; i <= Math.sqrt(triangle); i++) {
				if (triangle % i == 0) {
					result.add(i);
					numberOfDivisors++;
				}
			}

			// 1 to the square root of the number holds exactly half of the divisors
			// so multiply it by 2 to include the other corresponding half
			numberOfDivisors *= 2;
		}

		long finish = System.currentTimeMillis(); // stop the stopwatch

		System.out.printf("number:%d, dividers:%s\n", triangle, result.stream().map(String::valueOf).collect(Collectors.joining(",")));
		System.out.println("Time taken: " + (finish - start) + " milliseconds");
		return Pair.of(triangle, result);
	}

	int triangleNumber(int n) {
		int sum = 0;
		for (int i = 0; i <= n; i++)
			sum += i;
		return sum;
	}
}
