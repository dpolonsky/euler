package com.dp;

/**
 * Even Fibonacci numbers
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class P2EvenFibonacciNumbers {
	public static void main(String args[]) {
		P2EvenFibonacciNumbers evenFibonacciNumbers = new P2EvenFibonacciNumbers();

		System.out.println(evenFibonacciNumbers.evenFibonacciSum1(4_000_000));
		System.out.println(evenFibonacciNumbers.evenFibonacciSum2(4_000_000));
	}

	private long evenFibonacciSum1(int limit) {

		if (limit < 2)
			return 0;

		long first = 1, second = 2, result = 0;

		long curr = first + second;
		while (second <= limit && curr <= limit) {
			curr = first + second;

			first = second;
			second = curr;

			if (first % 2 == 0)
				result += first;

		}
		return result;
	}

	int evenFibonacciSum2(int limit) {
		if (limit < 2)
			return 0;

		// Initialize first two even prime numbers
		// and their sum
		long ef1 = 0, ef2 = 2;
		long sum = ef1 + ef2;

		// calculating sum of even Fibonacci value
		while (ef2 <= limit) {
			// get next even value of Fibonacci sequence
			long ef3 = 4 * ef2 + ef1;

			// If we go beyond limit, we break loop
			if (ef3 > limit)
				break;

			// Move to next even number and update sum
			ef1 = ef2;
			ef2 = ef3;
			sum += ef2;
		}

		return (int) sum;
	}
}
